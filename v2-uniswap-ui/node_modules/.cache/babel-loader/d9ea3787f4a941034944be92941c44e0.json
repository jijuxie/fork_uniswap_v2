{"ast":null,"code":"import JSBI from 'jsbi';\nexport { default as JSBI } from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport warning from 'tiny-warning';\nimport { getAddress, getCreate2Address } from '@ethersproject/address';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport _Decimal from 'decimal.js-light';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { Contract } from '@ethersproject/contracts';\nimport { getNetwork } from '@ethersproject/networks';\nimport { getDefaultProvider } from '@ethersproject/providers';\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json';\n\nvar _SOLIDITY_TYPE_MAXIMA;\n\nvar ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"G\\xD6RLI\"] = 5] = \"G\\xD6RLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n})(ChainId || (ChainId = {}));\n\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n\nvar FACTORY_ADDRESS = '0x727A7dd2F55815b5f2fE4975e5337182A70F856b';\nvar INIT_CODE_HASH = '0xaf88dd15a55596feb9d67243c727bfd6144af12453963809bc91f0cfcf8241bc';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\nvar THREE = /*#__PURE__*/JSBI.BigInt(3);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\nvar TEN = /*#__PURE__*/JSBI.BigInt(10);\n\nvar _100 = /*#__PURE__*/JSBI.BigInt(100);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nvar SolidityType;\n\n(function (SolidityType) {\n  SolidityType[\"uint8\"] = \"uint8\";\n  SolidityType[\"uint256\"] = \"uint256\";\n})(SolidityType || (SolidityType = {}));\n\nvar SOLIDITY_TYPE_MAXIMA = (_SOLIDITY_TYPE_MAXIMA = {}, _SOLIDITY_TYPE_MAXIMA[SolidityType.uint8] = /*#__PURE__*/JSBI.BigInt('0xff'), _SOLIDITY_TYPE_MAXIMA[SolidityType.uint256] = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'), _SOLIDITY_TYPE_MAXIMA);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction validateSolidityTypeInstance(value, solidityType) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n  !JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]) ? process.env.NODE_ENV !== \"production\" ? invariant(false, value + \" is not a \" + solidityType + \".\") : invariant(false) : void 0;\n} // warns if addresses are not checksummed\n\n\nfunction validateAndParseAddress(address) {\n  try {\n    var checksummedAddress = getAddress(address);\n    process.env.NODE_ENV !== \"production\" ? warning(address === checksummedAddress, address + \" is not checksummed.\") : void 0;\n    return checksummedAddress;\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? invariant(false, address + \" is not a valid address.\") : invariant(false);\n  }\n}\n\nfunction parseBigintIsh(bigintIsh) {\n  return bigintIsh instanceof JSBI ? bigintIsh : typeof bigintIsh === 'bigint' ? JSBI.BigInt(bigintIsh.toString()) : JSBI.BigInt(bigintIsh);\n} // mock the on-chain sqrt function\n\n\nfunction sqrt(y) {\n  validateSolidityTypeInstance(y, SolidityType.uint256);\n  var z = ZERO;\n  var x;\n\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y;\n    x = JSBI.add(JSBI.divide(y, TWO), ONE);\n\n    while (JSBI.lessThan(x, z)) {\n      z = x;\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO);\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n\n  return z;\n} // given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\n\n\nvar Currency =\n/**\n * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n * @param decimals decimals of the currency\n * @param symbol symbol of the currency\n * @param name of the currency\n */\nfunction Currency(decimals, symbol, name) {\n  validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8);\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\n * The only instance of the base class `Currency`.\n */\n\n\nCurrency.ETHER = /*#__PURE__*/new Currency(18, 'ETH', 'Ether');\nvar ETHER = Currency.ETHER;\n\nvar _WETH;\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\n\n\nvar Token = /*#__PURE__*/function (_Currency) {\n  _inheritsLoose(Token, _Currency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _Currency.call(this, decimals, symbol, name) || this;\n    _this.chainId = chainId;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    // short circuit on reference equality\n    if (this === other) {\n      return true;\n    }\n\n    return this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  };\n\n  return Token;\n}(Currency);\n/**\n * Compares two currencies for equality\n */\n\n\nfunction currencyEquals(currencyA, currencyB) {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB);\n  } else if (currencyA instanceof Token) {\n    return false;\n  } else if (currencyB instanceof Token) {\n    return false;\n  } else {\n    return currencyA === currencyB;\n  }\n}\n\nvar WETH = (_WETH = {}, _WETH[ChainId.MAINNET] = /*#__PURE__*/new Token(ChainId.MAINNET, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.ROPSTEN] = /*#__PURE__*/new Token(ChainId.ROPSTEN, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.RINKEBY] = /*#__PURE__*/new Token(ChainId.RINKEBY, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.GÖRLI] = /*#__PURE__*/new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[ChainId.KOVAN] = /*#__PURE__*/new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH);\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = ONE;\n    }\n\n    this.numerator = parseBigintIsh(numerator);\n    this.denominator = parseBigintIsh(denominator);\n  } // performs floor division\n\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other));\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  };\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction); // amount _must_ be raw, i.e. in the native representation\n\n\n  function CurrencyAmount(currency, amount) {\n    var _this;\n\n    var parsedAmount = parseBigintIsh(amount);\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256);\n    _this = _Fraction.call(this, parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals))) || this;\n    _this.currency = currency;\n    return _this;\n  }\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n\n\n  CurrencyAmount.ether = function ether(amount) {\n    return new CurrencyAmount(ETHER, amount);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !currencyEquals(this.currency, other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.toSignificant.call(this, significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.toFixed.call(this, decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.numerator.toString()).div(this.denominator.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"raw\",\n    get: function get() {\n      return this.numerator;\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar TokenAmount = /*#__PURE__*/function (_CurrencyAmount) {\n  _inheritsLoose(TokenAmount, _CurrencyAmount); // amount _must_ be raw, i.e. in the native representation\n\n\n  function TokenAmount(token, amount) {\n    var _this;\n\n    _this = _CurrencyAmount.call(this, token, amount) || this;\n    _this.token = token;\n    return _this;\n  }\n\n  var _proto = TokenAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw));\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.token.equals(other.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw));\n  };\n\n  return TokenAmount;\n}(CurrencyAmount);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction); // denominator and numerator _must_ be raw, i.e. in the native representation\n\n\n  function Price(baseCurrency, quoteCurrency, denominator, numerator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n\n  Price.fromRoute = function fromRoute(route) {\n    var prices = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(route.pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      prices.push(route.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw));\n    }\n\n    return prices.slice(1).reduce(function (accumulator, currentValue) {\n      return accumulator.multiply(currentValue);\n    }, prices[0]);\n  };\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    !currencyEquals(this.quoteCurrency, other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  } // performs floor division on overflow\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyEquals(currencyAmount.currency, this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, _Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n    }\n\n    return CurrencyAmount.ether(_Fraction.prototype.multiply.call(this, currencyAmount.raw).quotient);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjusted.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjusted.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"raw\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }, {\n    key: \"adjusted\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n\nvar PAIR_ADDRESS_CACHE = {};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(tokenAmountA, tokenAmountB) {\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].token.chainId, Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token), 18, 'SWAP-LP', 'Swap-LP-Token');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    var _PAIR_ADDRESS_CACHE, _PAIR_ADDRESS_CACHE$t;\n\n    var tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA]; // does safety checks\n\n    if (((_PAIR_ADDRESS_CACHE = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE === void 0 ? void 0 : (_PAIR_ADDRESS_CACHE$t = _PAIR_ADDRESS_CACHE[tokens[0].address]) === null || _PAIR_ADDRESS_CACHE$t === void 0 ? void 0 : _PAIR_ADDRESS_CACHE$t[tokens[1].address]) === undefined) {\n      var _PAIR_ADDRESS_CACHE2, _extends2, _extends3;\n\n      PAIR_ADDRESS_CACHE = _extends({}, PAIR_ADDRESS_CACHE, (_extends3 = {}, _extends3[tokens[0].address] = _extends({}, (_PAIR_ADDRESS_CACHE2 = PAIR_ADDRESS_CACHE) === null || _PAIR_ADDRESS_CACHE2 === void 0 ? void 0 : _PAIR_ADDRESS_CACHE2[tokens[0].address], (_extends2 = {}, _extends2[tokens[1].address] = getCreate2Address(FACTORY_ADDRESS, keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]), INIT_CODE_HASH), _extends2)), _extends3));\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address];\n  }\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  ;\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.token);\n    var outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee);\n    var outputAmount = new TokenAmount(inputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO) || JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.token);\n    var inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997);\n    var inputAmount = new TokenAmount(outputAmount.token.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return new TokenAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.token.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = parseBigintIsh(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return new TokenAmount(token, JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw));\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw);\n    }\n    /**\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].token;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].token;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !pairs.every(function (pair) {\n      return pair.chainId === pairs[0].chainId;\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(input instanceof Token && pairs[0].involvesToken(input) || input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || output instanceof Token && pairs[pairs.length - 1].involvesToken(output) || output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [input instanceof Token ? input : WETH[pairs[0].chainId]];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.midPrice = Price.fromRoute(this);\n    this.input = input;\n    this.output = output !== null && output !== void 0 ? output : path[path.length - 1];\n  }\n\n  _createClass(Route, [{\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}();\n\nvar _100_PERCENT = /*#__PURE__*/new Fraction(_100);\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    return _Fraction.apply(this, arguments) || this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\n\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var exactQuote = midPrice.raw.multiply(inputAmount.raw); // calculate slippage := (exactQuote - outputAmount) / exactQuote\n\n  var slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote);\n  return new Percent(slippage.numerator, slippage.denominator);\n} // comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !currencyEquals(a.inputAmount.currency, b.inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !currencyEquals(a.outputAmount.currency, b.outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\n\n\nfunction wrappedAmount(currencyAmount, chainId) {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount;\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw);\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n\nfunction wrappedCurrency(currency, chainId) {\n  if (currency instanceof Token) return currency;\n  if (currency === ETHER) return WETH[chainId];\n  process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false);\n}\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    var amounts = new Array(route.path.length);\n    var nextPairs = new Array(route.pairs.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !currencyEquals(amount.currency, route.input) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      amounts[0] = wrappedAmount(amount, route.chainId);\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(amounts[i]),\n            outputAmount = _pair$getOutputAmount[0],\n            nextPair = _pair$getOutputAmount[1];\n\n        amounts[i + 1] = outputAmount;\n        nextPairs[i] = nextPair;\n      }\n    } else {\n      !currencyEquals(amount.currency, route.output) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId);\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(amounts[_i]),\n            inputAmount = _pair$getInputAmount[0],\n            _nextPair = _pair$getInputAmount[1];\n\n        amounts[_i - 1] = inputAmount;\n        nextPairs[_i - 1] = _nextPair;\n      }\n    }\n\n    this.route = route;\n    this.tradeType = tradeType;\n    this.inputAmount = tradeType === TradeType.EXACT_INPUT ? amount : route.input === ETHER ? CurrencyAmount.ether(amounts[0].raw) : amounts[0];\n    this.outputAmount = tradeType === TradeType.EXACT_OUTPUT ? amount : route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1];\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.raw, this.outputAmount.raw);\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input));\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  }\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.raw).quotient;\n      return this.outputAmount instanceof TokenAmount ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut) : CurrencyAmount.ether(slippageAdjustedAmountOut);\n    }\n  }\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient;\n      return this.inputAmount instanceof TokenAmount ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn) : CurrencyAmount.ether(slippageAdjustedAmountIn);\n    }\n  }\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, originalAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountIn === void 0) {\n      originalAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountIn === currencyAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountIn instanceof TokenAmount ? currencyAmountIn.token.chainId : currencyOut instanceof Token ? currencyOut.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountIn = wrappedAmount(currencyAmountIn, chainId);\n    var tokenOut = wrappedCurrency(currencyOut, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), originalAmountIn.currency, currencyOut), originalAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, amountOut, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), originalAmountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, originalAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (originalAmountOut === void 0) {\n      originalAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(originalAmountOut === currencyAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var chainId = currencyAmountOut instanceof TokenAmount ? currencyAmountOut.token.chainId : currencyIn instanceof Token ? currencyIn.chainId : undefined;\n    !(chainId !== undefined) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n    var amountOut = wrappedAmount(currencyAmountOut, chainId);\n    var tokenIn = wrappedCurrency(currencyIn, chainId);\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, originalAmountOut.currency), originalAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, amountIn, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), originalAmountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.raw.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\n   * Cannot be constructed.\n   */\n  function Router() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency === ETHER;\n    var etherOut = trade.outputAmount.currency === ETHER; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nvar ERC20 = [{\n  constant: true,\n  inputs: [],\n  name: \"decimals\",\n  outputs: [{\n    name: \"\",\n    type: \"uint8\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}, {\n  constant: true,\n  inputs: [{\n    name: \"\",\n    type: \"address\"\n  }],\n  name: \"balanceOf\",\n  outputs: [{\n    name: \"\",\n    type: \"uint256\"\n  }],\n  payable: false,\n  stateMutability: \"view\",\n  type: \"function\"\n}];\n\nvar _TOKEN_DECIMALS_CACHE;\n\nvar TOKEN_DECIMALS_CACHE = (_TOKEN_DECIMALS_CACHE = {}, _TOKEN_DECIMALS_CACHE[ChainId.MAINNET] = {\n  '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n\n}, _TOKEN_DECIMALS_CACHE);\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\n\nvar Fetcher = /*#__PURE__*/function () {\n  /**\n   * Cannot be constructed.\n   */\n  function Fetcher() {}\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n\n\n  Fetcher.fetchTokenData = function fetchTokenData(chainId, address, provider, symbol, name) {\n    try {\n      var _TOKEN_DECIMALS_CACHE2, _TOKEN_DECIMALS_CACHE3;\n\n      var _temp3 = function _temp3(parsedDecimals) {\n        return new Token(chainId, address, parsedDecimals, symbol, name);\n      };\n\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(chainId));\n\n      var _temp4 = typeof ((_TOKEN_DECIMALS_CACHE2 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE2 === void 0 ? void 0 : (_TOKEN_DECIMALS_CACHE3 = _TOKEN_DECIMALS_CACHE2[chainId]) === null || _TOKEN_DECIMALS_CACHE3 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE3[address]) === 'number';\n\n      return Promise.resolve(_temp4 ? _temp3(TOKEN_DECIMALS_CACHE[chainId][address]) : Promise.resolve(new Contract(address, ERC20, provider).decimals().then(function (decimals) {\n        var _TOKEN_DECIMALS_CACHE4, _extends2, _extends3;\n\n        TOKEN_DECIMALS_CACHE = _extends({}, TOKEN_DECIMALS_CACHE, (_extends3 = {}, _extends3[chainId] = _extends({}, (_TOKEN_DECIMALS_CACHE4 = TOKEN_DECIMALS_CACHE) === null || _TOKEN_DECIMALS_CACHE4 === void 0 ? void 0 : _TOKEN_DECIMALS_CACHE4[chainId], (_extends2 = {}, _extends2[address] = decimals, _extends2)), _extends3));\n        return decimals;\n      })).then(_temp3));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  ;\n\n  Fetcher.fetchPairData = function fetchPairData(tokenA, tokenB, provider) {\n    try {\n      if (provider === undefined) provider = getDefaultProvider(getNetwork(tokenA.chainId));\n      !(tokenA.chainId === tokenB.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n      var address = Pair.getAddress(tokenA, tokenB);\n      return Promise.resolve(new Contract(address, IUniswapV2Pair.abi, provider).getReserves()).then(function (_ref) {\n        var reserves0 = _ref[0],\n            reserves1 = _ref[1];\n        var balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0];\n        return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]));\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return Fetcher;\n}();\n\nexport { ChainId, Currency, CurrencyAmount, ETHER, FACTORY_ADDRESS, Fetcher, Fraction, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Percent, Price, Rounding, Route, Router, Token, TokenAmount, Trade, TradeType, WETH, currencyEquals, inputOutputComparator, tradeComparator };","map":{"version":3,"mappings":"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","names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_inheritsLoose","_this","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","process","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","ETHER","Token","chainId","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","MAINNET","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE2","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","_ref$maxNumResults","maxHops","_ref$maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","_temp3","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x727A7dd2F55815b5f2fE4975e5337182A70F856b'\n\nexport const INIT_CODE_HASH = '0xaf88dd15a55596feb9d67243c727bfd6144af12453963809bc91f0cfcf8241bc'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\n\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { ChainId } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'SWAP-LP',\n      'Swap-LP-Token'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}